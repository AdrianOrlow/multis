/* * Combination */ var combinationBox = document.querySelector('#combinationBox'); var combinationN = document.querySelector('#combinationN'); combinationN.addEventListener('input', calculateCombination); var combinationK = document.querySelector('#combinationK'); combinationK.addEventListener('input', calculateCombination); function updateCombinationBox(value, error) { combinationBox.innerHTML = value; MathJax.Hub.Queue(['Typeset', MathJax.Hub, combinationBox]); if (error) { combinationBox.classList = 'text--red'; } else { combinationBox.classList = ''; } return true; } function calculateCombination() { var n = parseInt(combinationN.value); var k = parseInt(combinationK.value); if (!Number.isInteger(n) || !Number.isInteger(k)) { updateCombinationBox('SpeÅ‚nij warunki: $$n,k \\in \\mathbb{N} \\land k \\leq n$$', true); return; } if (k > n) { updateCombinationBox('$$k > n$$', true); return; } var nResult = factNum(n); var nkResult = factNum(k) * factNum(n - k); var fullResult = nResult / nkResult; updateCombinationBox("$${\\binom {".concat(n, "}{").concat(k, "}}={\\frac {").concat(n, "!}{").concat(k, "!(").concat(n, "-").concat(k, ")!}}={\\frac {").concat(factString(n), "}{").concat(factString(k), "\\cdot").concat(factString(k), "}}=\\dfrac{").concat(nResult, "}{").concat(nkResult, "}=").concat(fullResult, "$$")); } function factString(n) { var val = 1; for (var i = 2; i <= n; i++) { val += "\\cdot".concat(i); } return val; } function factNum(n) { var val = 1; for (var i = 2; i <= n; i++) { val = val * i; } return val; } /* * Pascals'triangle */ var pTriangleBox = document.querySelector('#triangle'); var pTriangleLevels = document.querySelector('#pascalsTriangleLevels'); var pTriangleBtn = document.querySelector('#pascalsTriangleBtn'); pTriangleBtn.addEventListener('click', function () { createPascalsTriangle(pTriangleBox, pTriangleLevels.value); startButtonCycle(pTriangleBtn, pTriangleLevels.value * 1300); }); function showPascalsTriangle(element) { var triangleRows = document.querySelectorAll("#".concat(element.id, " .triangle__row")); var _loop = function _loop(i) { setTimeout(function () { triangleRows[i].classList.add('showed'); setTimeout(function () { triangleRows[i].classList.add('ended'); }, 1300); }, i * 1000); }; for (var i = 0; i < triangleRows.length; i++) { _loop(i); } } function appendPascalsTriangle(triangle, element) { for (var i = 0; i < triangle.length; i++) { var row = document.createElement('div'); row.classList.add('triangle__row'); var rowNum = document.createElement('div'); rowNum.classList.add('triangle__row__num'); rowNum.innerHTML = "".concat(i); row.appendChild(rowNum); for (var j = 0; j < triangle[i].length; j++) { var block = document.createElement('div'); block.classList.add('triangle__el'); block.innerHTML = triangle[i][j]; if (i + 1 !== triangle.length) { var blockAnimLeft = document.createElement('span'); blockAnimLeft.classList.add('left'); blockAnimLeft.innerHTML = triangle[i][j]; var blockAnimRight = document.createElement('span'); blockAnimRight.classList.add('right'); blockAnimRight.innerHTML = triangle[i][j]; block.appendChild(blockAnimLeft); block.appendChild(blockAnimRight); } row.appendChild(block); } element.append(row); } showPascalsTriangle(element); } function createPascalsTriangle(element, levels) { pTriangleBtn.classList.add('actions__btn--inprocess'); element.innerHTML = ''; var triangle = []; for (var i = 0; i < levels; i++) { triangle[i] = new Array(i + 1); for (var j = 0; j < i + 1; j++) { if (j === 0 || j === i) { triangle[i][j] = 1; } else { triangle[i][j] = triangle[i - 1][j - 1] + triangle[i - 1][j]; } } } appendPascalsTriangle(triangle, element); } /* * Sierpinski's triangles in Pascal's triangle */ var sTriangle = document.querySelector('#sTriangle'); var sTriangleLevels = document.querySelector('#sTriangleLevels'); var sTriangleBtn = document.querySelector('#sTriangleBtn'); sTriangleBtn.addEventListener('click', function () { createSierpinskisTriangles(sTriangle, sTriangleLevels); startButtonCycle(sTriangleBtn, sTriangleLevels.value * 1300); }); function createSierpinskisTriangles(element, levels) { createPascalsTriangle(element, sTriangleLevels.value); setTimeout(function () { var triangleElements = document.querySelectorAll("#sTriangle .triangle__el"); for (var i = 0; i < triangleElements.length; i++) { triangleElement = triangleElements[i]; triangleElementValue = parseInt(triangleElement.innerText.split('\n')[0]); console.log(triangleElementValue); if (triangleElementValue % 2 === 0) { triangleElement.classList.add('hidden'); } } }, sTriangleLevels.value * 1400); } /* Basic */ function startButtonCycle(element, time) { element.classList.add('actions__btn--inprocess'); setTimeout(function () { element.classList.remove('actions__btn--inprocess'); }, time); } /* Init */ document.addEventListener("DOMContentLoaded", function () { updateCombinationBox('Wpisz dane'); });